type FungibleBalance = record { locked : nat; amount : nat };
type FungibleStandard = variant { DIP20 };
type Listing = record {
  status : ListingStatus;
  direct_buy : bool;
  price : nat;
  payment_address : principal;
};
type ListingStatus = variant { Selling; Uninitialized; Created };
type MPApiError = variant {
  NonExistentCollection;
  NoDeposit;
  InvalidListingStatus;
  InsufficientFungibleBalance;
  InvalidListing;
  TransferNonFungibleError;
  Unauthorized;
  TransferFungibleError;
  InvalidOffer;
  Other : text;
  InsufficientNonFungibleBalance;
  InvalidOfferStatus;
  CAPInsertionError;
};
type NFTStandard = variant { EXT; DIP721v2 };
type Offer = record {
  status : OfferStatus;
  token_id : nat64;
  price : nat;
  payment_address : principal;
  nft_canister_id : principal;
};
type OfferStatus = variant {
  Bought;
  Uninitialized;
  Denied;
  Cancelled;
  Created;
};
type Result = variant { Ok; Err : MPApiError };
service : (principal, principal) -> {
  acceptOffer : (principal, nat64, principal) -> (Result);
  addCollection : (
      principal,
      nat16,
      nat64,
      text,
      principal,
      NFTStandard,
      principal,
      FungibleStandard,
    ) -> (Result);
  balanceOf : (principal) -> (vec record { principal; FungibleBalance }) query;
  cancelListing : (principal, nat64) -> (Result);
  cancelOffer : (principal, nat64) -> (Result);
  denyOffer : (nat64) -> (Result);
  depositFungible : (principal, FungibleStandard, nat) -> (Result);
  depositNFT : (principal, nat64) -> (Result);
  directBuy : (principal, nat64) -> (Result);
  getAllBalances : () -> (
      vec record { record { principal; principal }; FungibleBalance },
    ) query;
  getAllListings : () -> (
      vec record { record { principal; nat64 }; Listing },
    ) query;
  getAllOffers : () -> (
      vec record {
        principal;
        vec record { nat64; vec record { principal; Offer } };
      },
    ) query;
  makeListing : (bool, principal, nat64, nat) -> (Result);
  makeOffer : (principal, nat64, nat) -> (Result);
  withdrawFungible : (principal, FungibleStandard) -> (Result);
  withdrawNFT : (principal, nat64) -> (Result);
}