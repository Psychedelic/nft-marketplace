type Collection = record {
  collection_fee : nat;
  creation_time : nat64;
  nft_canister_standard : NFTStandard;
  owner : principal;
  collection_name : text;
  fungible_volume : nat;
  fungible_canister_standard : FungibleStandard;
  fungible_canister_id : principal;
  nft_canister_id : principal;
};
type FungibleStandard = variant { DIP20 };
type Listing = record {
  fee : vec record { text; principal; nat };
  status : ListingStatus;
  created : nat64;
  seller : principal;
  price : nat;
};
type ListingStatus = variant { Selling; Uninitialized; Created };
type MPApiError = variant {
  NonExistentCollection;
  NoDeposit;
  InvalidListingStatus;
  InsufficientFungibleBalance;
  InvalidListing;
  TransferNonFungibleError;
  Unauthorized;
  InsufficientFungibleAllowance;
  TransferFungibleError;
  InvalidOffer;
  Other : text;
  InsufficientNonFungibleBalance;
  InvalidOfferStatus;
  InvalidOperator;
  CAPInsertionError;
};
type NFTStandard = variant { EXT; DIP721v2 };
type Offer = record {
  status : OfferStatus;
  created : nat64;
  token_id : nat;
  token_owner : principal;
  buyer : principal;
  price : nat;
  nft_canister_id : principal;
};
type OfferStatus = variant {
  Bought;
  Uninitialized;
  Denied;
  Cancelled;
  Created;
};
type Result = variant { Ok; Err : MPApiError };
type Result_1 = variant { Ok : nat; Err : MPApiError };
type Result_2 = variant { Ok : Listing; Err : MPApiError };
service : (principal, principal, nat) -> {
  acceptOffer : (principal, nat, principal) -> (Result);
  addCollection : (
      principal,
      nat,
      nat64,
      text,
      principal,
      NFTStandard,
      principal,
      FungibleStandard,
    ) -> (Result);
  balanceOf : (principal) -> (vec record { principal; nat }) query;
  cancelListing : (principal, nat) -> (Result);
  cancelOffer : (principal, nat) -> (Result);
  denyOffer : (principal, nat, principal) -> (Result);
  directBuy : (principal, nat) -> (Result);
  getAllBalances : () -> (
      vec record { record { principal; principal }; nat },
    ) query;
  getBuyerOffers : (principal, principal) -> (vec Offer) query;
  getCollections : () -> (vec record { principal; Collection }) query;
  getFloor : (principal) -> (Result_1) query;
  getProtocolFee : () -> (nat) query;
  getTokenListing : (principal, nat) -> (Result_2) query;
  getTokenOffers : (principal, vec nat) -> (
      vec record { nat; vec Offer },
    ) query;
  git_commit_hash : () -> (text) query;
  makeListing : (principal, nat, nat) -> (Result);
  makeOffer : (principal, nat, nat) -> (Result);
  setProtocolFee : (nat) -> (Result);
  withdrawFungible : (principal, FungibleStandard) -> (Result);
}