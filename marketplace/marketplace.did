type BuyOffer = record {
  status : BuyOfferStatus;
  non_fungible_contract_address : principal;
  token_id : nat64;
  price : nat;
  payment_address : principal;
};
type BuyOfferStatus = variant {
  Bought;
  CancelledByBuyer;
  Uninitialized;
  Created;
  CancelledBySeller;
};
type FungibleTokenType = variant { DIP20 };
type MPApiError = variant {
  NonExistentCollection;
  InvalidSaleOfferStatus;
  InsufficientFungibleBalance;
  InvalidSaleOffer;
  InvalidBuyOfferStatus;
  TransferNonFungibleError;
  Unauthorized;
  TransferFungibleError;
  InvalidBuyOffer;
  Other;
  InsufficientNonFungibleBalance;
  CAPInsertionError;
};
type NonFungibleTokenType = variant { EXT; DIP721 };
type Result = variant { Ok; Err : MPApiError };
type Result_1 = variant { Ok : nat64; Err : MPApiError };
type SaleOffer = record {
  status : SaleOfferStatus;
  is_direct_buyable : bool;
  payment_address : principal;
  list_price : nat;
};
type SaleOfferStatus = variant { Selling; Uninitialized; Created };
service : (principal, principal) -> {
  acceptBuyOffer : (nat64) -> (Result);
  addCollection : (
      principal,
      nat16,
      nat64,
      text,
      principal,
      NonFungibleTokenType,
      principal,
      FungibleTokenType,
    ) -> ();
  cancelListingBySeller : (principal, nat64) -> (Result);
  cancelOfferByBuyer : (nat64) -> (Result);
  cancelOfferBySeller : (nat64) -> (Result);
  directBuy : (principal, nat64) -> (Result);
  getBuyOffers : (nat64, nat64) -> (vec BuyOffer) query;
  getSaleOffers : () -> (
      vec record { record { principal; nat64 }; SaleOffer },
    ) query;
  listForSale : (principal, nat64, nat) -> (Result);
  makeBuyOffer : (principal, nat64, nat) -> (Result_1);
  withdrawFungible : (principal, FungibleTokenType) -> (Result);
}